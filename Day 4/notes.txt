1. Methods in Java:
        A method in Java or Java Method is a collection of statements that perform some specific task and return the result to the caller.
        - Methods in Java allow us to reuse the code without retyping code.
        - In Java, we create the components with the help of classes.
        - Every class has a behavior, and it is defined through the method.
        - Behaviour or method is defined with the round brackets ().
        - For every method, we also have to specify the type of access to it.
        - Method does some tasks, and it also returns something.
        - We can call methods by creating an object.
        - We can pass also pass values in a method.
        - We can also put conditions inside the method like with the help of if..else.
        - return keyword stops the execution of a method as it does not execute the further statements after it.

        -- void is used when we do not want a method to return something.
        -- String is used to return a string value.
        -- int is used to return an integer value.

        - Main method is the start of execution from where the program begins.

        The syntax for method:-
        class Computer
        {
         public void playMusic()
         {
          System.out.println("Music Playing..");
         }
        }

2. Interfaces in Java:
        In an abstract class, we can have both abstract methods and normal or concrete methods.
        - If your class has only abstract methods then instead of using class, you can simply use an interface in place of it.
        - Interface is not any class.
        - Every method in an interface is public and abstract by default.
        - Even if you do not use two keywords (public and abstract) with methods then also it will not give an error in an interface. By default, it will consider all methods as public and abstract.
        - We cannot instantiate an interface.
        - Interface only shows the design, and it does not provide any implementation.
        - To provide an implementation of methods, you need to create a class and instantiate it also.
        e.g,
         interface A
         {
          methods()----
         }


        implements keyword:-
        To implement an interface, we use the keyword - implements.
        - If you use the implements keyword with class, then it is compulsory to give an implementation of all the methods that are defined in an interface.
        - If you do not give an implementation of all methods then it will make your class an abstract class by default.
        - So, to make a concrete class, you have to give the implementation of all methods present in an interface.
        e.g.,
         class B implements A
         {
          methods() {
           statement;
          }
          ------
         }


        Variables in an interface:-
        - We can call the methods of an interface by creating an object of the class that implements an interface.
        - We can also declare variables in an interface.
        - All the variables in an interface are final and static by default.
        - So, we first have to initialize the variables in an interface.
        - As a variable is static in an interface, then you do not need to create an object for it. You can directly call the variable by using the interface name.
        e.g., A.area;    (here, area is a variable initialized in an interface)
        - As the variable is final, you can not change the value of that variable after initializing it once.

        -Interface does not have its own memory in the heap.


3. Ternary Operator:
        In Java, a ternary operator can be used to replace the ifâ€¦else statement in certain situations.
        - Its syntax is:

          condition ? expression1 : expression2;

        - Here, condition is evaluated and if condition is true, expression1 is executed.
        - And, if condition is false, expression2 is executed.